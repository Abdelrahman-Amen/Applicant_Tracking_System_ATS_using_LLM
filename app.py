import streamlit as st
import google.generativeai as genai
import os
import PyPDF2 as pdf
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure the Google Generative AI with the API key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Function to get response from Google Generative AI
def get_gemini_response(prompt):
    """
    Sends a prompt to the Google Generative AI model and returns the generated response.

    Args:
        prompt (str): The input prompt to be processed by the model.

    Returns:
        str: The response text generated by the model.
    """
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content(prompt)
    return response.text

# Function to extract text from PDF file
def input_pdf_text(uploaded_file):
    """
    Extracts text content from a given PDF file.

    Args:
        uploaded_file: The uploaded PDF file.

    Returns:
        str: Extracted text from the PDF.
    """
    reader = pdf.PdfReader(uploaded_file)
    text = ""
    for page in range(len(reader.pages)):
        text += reader.pages[page].extract_text()
    return text

# Streamlit app configuration
st.set_page_config(page_title="ATS Resume Expert")
st.header("ATS Tracking System")

# Text area for job description input
input_text = st.text_area("Job Description:", key="input")

# File uploader for resume
uploaded_file = st.file_uploader("Upload your resume (PDF)...", type=["pdf"])

if uploaded_file is not None:
    st.write("PDF Uploaded Successfully")

# Buttons for user actions
submit1 = st.button("Tell Me About the Resume")
submit2 = st.button("Percentage Match")

# Updated input prompts
input_prompt1 = """
Imagine you are a seasoned Technical HR Manager. Your task is to analyze the provided resume and compare it with the job description.
Give a professional evaluation of how well the candidate's qualifications match the role. Mention key strengths and areas for improvement in relation to the specified job criteria.
Resume: {resume}
Job Description: {jd}
"""

input_prompt2 = """
Pretend you are an advanced Applicant Tracking System (ATS) expert with deep knowledge of data science and recruitment tools.
Your responsibility is to analyze the resume and compare it against the job description.
Provide a compatibility score (percentage) for the resume, list missing keywords, and include a brief summary of your evaluation.
Resume: {resume}
Job Description: {jd}
"""

# Handle the 'Tell Me About the Resume' button
if submit1:
    if uploaded_file is not None and input_text.strip():
        # Extract text from the uploaded resume
        resume_text = input_pdf_text(uploaded_file)
        # Format the prompt with resume and job description
        prompt = input_prompt1.format(resume=resume_text, jd=input_text)
        # Get the response from the Generative AI
        response = get_gemini_response(prompt)
        # Display the response
        st.subheader("Response:")
        st.write(response)
    else:
        st.write("Please upload the resume and provide a job description.")

# Handle the 'Percentage Match' button
elif submit2:
    if uploaded_file is not None and input_text.strip():
        # Extract text from the uploaded resume
        resume_text = input_pdf_text(uploaded_file)
        # Format the prompt with resume and job description
        prompt = input_prompt2.format(resume=resume_text, jd=input_text)
        # Get the response from the Generative AI
        response = get_gemini_response(prompt)
        # Display the response
        st.subheader("Response:")
        st.write(response)
    else:
        st.write("Please upload the resume and provide a job description.")
